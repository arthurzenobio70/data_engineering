name: Terraform Infrastructure

on:
  push:
    branches: [main]
    paths:
      - 'terraform/**'
  
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
  
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TF_VERSION: '1.6.0'
  TF_LOG: INFO

jobs:
  terraform-validate:
    name: "Terraform Validate"
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Run tflint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: latest

      - name: Init TFLint
        working-directory: ./terraform
        run: tflint --init

      - name: Run TFLint
        working-directory: ./terraform
        run: tflint

  terraform-security:
    name: "Terraform Security Scan"
    runs-on: ubuntu-latest
    needs: terraform-validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    needs: [terraform-validate, terraform-security]
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    env:
      TF_VAR_environment: ${{ matrix.environment }}
      TF_VAR_snowflake_account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      TF_VAR_snowflake_username: ${{ secrets.SNOWFLAKE_USERNAME }}
      TF_VAR_snowflake_password: ${{ secrets.SNOWFLAKE_PASSWORD }}
      TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
      TF_VAR_terraform_state_lock_table: ${{ secrets.TERRAFORM_STATE_LOCK_TABLE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create Terraform workspace
        working-directory: ./terraform
        run: |
          terraform init
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -out=tfplan-${{ matrix.environment }} \
            -no-color

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/tfplan-${{ matrix.environment }}

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const environment = '${{ matrix.environment }}';
            
            // Read terraform plan output
            // This would need to be captured from the plan step
            const planOutput = 'Terraform plan output for ' + environment;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Plan - ${environment}\n\`\`\`\n${planOutput}\n\`\`\``
            });

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
      max-parallel: 1  # Apply environments sequentially
    
    environment: terraform-${{ matrix.environment }}
    
    env:
      TF_VAR_environment: ${{ matrix.environment }}
      TF_VAR_snowflake_account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      TF_VAR_snowflake_username: ${{ secrets.SNOWFLAKE_USERNAME }}
      TF_VAR_snowflake_password: ${{ secrets.SNOWFLAKE_PASSWORD }}
      TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
      TF_VAR_terraform_state_lock_table: ${{ secrets.TERRAFORM_STATE_LOCK_TABLE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download Terraform Plan
        if: github.event_name != 'workflow_dispatch'
        uses: actions/download-artifact@v3
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/

      - name: Create Terraform workspace
        working-directory: ./terraform
        run: |
          terraform init
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Apply (from plan)
        if: github.event_name != 'workflow_dispatch'
        working-directory: ./terraform
        run: terraform apply tfplan-${{ matrix.environment }}

      - name: Terraform Apply (direct)
        if: github.event_name == 'workflow_dispatch'
        working-directory: ./terraform
        run: |
          terraform apply \
            -var-file="environments/${{ matrix.environment }}.tfvars" \
            -auto-approve

      - name: Output Terraform values
        working-directory: ./terraform
        run: terraform output -json > terraform-outputs-${{ matrix.environment }}.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v3
        with:
          name: terraform-outputs-${{ matrix.environment }}
          path: terraform/terraform-outputs-${{ matrix.environment }}.json

  terraform-destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy'
    
    environment: terraform-destroy
    
    env:
      TF_VAR_environment: ${{ github.event.inputs.environment }}
      TF_VAR_snowflake_account: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      TF_VAR_snowflake_username: ${{ secrets.SNOWFLAKE_USERNAME }}
      TF_VAR_snowflake_password: ${{ secrets.SNOWFLAKE_PASSWORD }}
      TF_VAR_terraform_state_bucket: ${{ secrets.TERRAFORM_STATE_BUCKET }}
      TF_VAR_terraform_state_lock_table: ${{ secrets.TERRAFORM_STATE_LOCK_TABLE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create Terraform workspace
        working-directory: ./terraform
        run: |
          terraform init
          terraform workspace select ${{ github.event.inputs.environment }}

      - name: Terraform Destroy
        working-directory: ./terraform
        run: |
          terraform destroy \
            -var-file="environments/${{ github.event.inputs.environment }}.tfvars" \
            -auto-approve
